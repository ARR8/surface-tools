#!/bin/env python3
import subprocess
import os
import signal
import atexit
import sys
from pydbus import SystemBus
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

#####CONFIGURATION#####
SCREENNAME = "eDP-1"
TOUCHDEVID = "Atmel Atmel maXTouch Digitizer touch"
NOTIFY_ON_LOCK = True
if NOTIFY_ON_LOCK:
    gi.require_version('Notify', '0.7')
    from gi.repository import Notify

#####PROGRAM CODE#####
#Do not change unless you know what you are doing!
XRANDR = "/usr/bin/xrandr"
XSETWACOM = "/usr/bin/xsetwacom"

PIDFILE = ""

def rotate(interface, changed_props, invalid_props):
    orientation = changed_props["AccelerometerOrientation"]
    if orientation in ["normal", "bottom-up", "left-up", "right-up"]:
        orientation_views = {"bottom-up": "inverted",
                             "normal": "normal",
                             "left-up": "left",
                             "right-up": "right"}
        subprocess.call([XRANDR, "--output", SCREENNAME, "--rotate",
                         orientation_views[orientation]])

        orientation_wacom = {"bottom-up": "half",
                             "normal": "none",
                             "left-up": "ccw",
                             "right-up": "cw"}
        subprocess.call([XSETWACOM, "--set", TOUCHDEVID, "rotate",
                         orientation_wacom[orientation]])

def toggle_rotlock(_, sensors):
    if sensors.onPropertiesChanged:
        sensors.onPropertiesChanged = None
        status_icon = "rotation-locked-symbolic"
        status_label = "Rotation locked"
    else:
        sensors.onPropertiesChanged = rotate
        status_icon = "rotation-allowed-symbolic"
        status_label = "Rotation allowed"

    try:
        n = Notify.Notification.new("Autorotation", status_label, status_icon)
        n.show()
    except NameError:
        pass
    ICON.set_from_icon_name(status_icon)

def cleanup(*args):
    os.remove(PIDFILE)
    try:
        Notify.uninit()
    except NameError:
        pass
    if args: # If called by signal, not by unexit
        atexit.unregister(cleanup)
        sys.exit()

if __name__ == "__main__":
    # Init dbus
    SENSORS = SystemBus().get("net.hadess.SensorProxy")
    SENSORS.ClaimAccelerometer()
    SENSORS.onPropertiesChanged = rotate

    # Init GTK
    try:
        Notify.init("autorotate")
    except NameError:
        pass
    ICON = Gtk.StatusIcon.new_from_icon_name("rotation-allowed-symbolic")
    ICON.connect("activate", toggle_rotlock, SENSORS)

    # Init PID
    try:
        RUNDIR = os.environ['XDG_RUNTIME_DIR']
    except KeyError:
        RUNDIR = '/tmp'
    PIDFILE = RUNDIR + '/autorotate'
    F = open(PIDFILE, 'x')
    F.write(str(os.getpid()))
    F.close()

    # Init system
    signal.signal(signal.SIGUSR1, lambda *args: toggle_rotlock(None, SENSORS))

    atexit.register(cleanup)
    signal.signal(signal.SIGTERM, cleanup)

    Gtk.main()
