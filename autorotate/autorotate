#!/usr/bin/python

#####CONFIGURATION#####
sensorname="accel_3d"

screenname="eDP1"

rotLockKey="win+o"

touchID="10"

#####PROGRAM CODE#####
#Do not change unless you know what you are doing!

xrandr="/usr/bin/xrandr"
xsetwacom="/usr/bin/xsetwacom"

resourcepaths=[
	"./",
	"/usr/share/autorotate/",
	"/usr/local/share/autorotate/"
	]

orientations=[
        "normal",
        "inverted",
        "left",
        "right"
        ]

rotlock=False

import pyudev
import re
import subprocess
import os.path
import signal
from gi.repository import Gtk, GdkPixbuf, GObject

hasAppIndicator = True
try:
    from gi.repository import AppIndicator3 as AppIndicator
except:
    hasAppIndicator = False

def twos_comp(val):
    if val & (1 << (16-1)) != 0:
        val = val - (1 << 16)
    return val

def getOrientation(accelX, accelY, accelZ):
    absAccelX = abs(accelX)
    absAccelY = abs(accelY)
    absAccelZ = abs(accelZ)

    if absAccelZ > 4 * absAccelX and absAccelZ > 4 * absAccelY:
        orientation = "flat"
    elif 3 * absAccelY > 2 * absAccelX:
        orientation = "inverted" if accelY > 0 else "normal"
    else:
        orientation = "left" if accelX > 0 else "right"
    return orientation

def rotate(orientation):
    if orientation in orientations:
        subprocess.call([xrandr, "--output", screenname, "--rotate", orientation])

        orientationWacom = {"inverted" : "half",
            "normal" : "none",
            "left" : "ccw",
            "right" : "cw",
        }
        subprocess.call([xsetwacom, "--set", touchID, "rotate", orientationWacom[orientation]])

def toggleRotLock(event):
    global rotlock
    global icon
    global lockrot
    global unlockrot

    rotlock = not rotlock
    statusIcon = lockrot if rotlock else unlockrot
    statusLabel = "Unlock Rotation" if rotlock else "Lock Rotation"

    if hasAppIndicator:
        global toggle
        icon.set_icon(statusIcon)
        toggle.set_label(statusLabel)
    else:
        icon.set_from_pixbuf(statusIcon)

def checkRotation():
    if not rotlock:
        device = pyudev.Device.from_path(context, path)
        accelX = twos_comp(device.attributes.asint("in_accel_x_raw"))
        accelY = twos_comp(device.attributes.asint("in_accel_y_raw"))
        accelZ = twos_comp(device.attributes.asint("in_accel_z_raw"))

        orientation = getOrientation(accelX, accelY, accelZ)

        global prevorientation
        if orientation != prevorientation:
            prevorientation = orientation
            rotate(orientation)
    GObject.timeout_add(1000, checkRotation)

context = pyudev.Context()
for device in context.list_devices(subsystem="iio").match_attribute("name", sensorname): break
assert device

path = device.device_path

prevorientation = ""

try:
    import keyboard
    keyboard.add_hotkey(rotLockKey, toggleRotLock, args=["activate"]) # Requires root
except ImportError:
    rotLockKey = None

iconPaths = dict()
for resourcepath in resourcepaths[::-1]:
    if resourcepath == './':
        resourcepath = os.path.join(os.path.dirname(__file__), '')
    if os.path.isfile(resourcepath + "rotate_lock.png"):
	iconPaths[True] = resourcepath + "rotate_lock.png"
        if hasAppIndicator:
            lockrot = iconPaths[True]
        else:
            lockrot = GdkPixbuf.Pixbuf.new_from_file(iconPaths[True])

    if os.path.isfile(resourcepath + "rotate.png"):
	iconPaths[False] = resourcepath + "rotate.png"
        if hasAppIndicator:
            unlockrot = iconPaths[False]
        else:
            unlockrot = GdkPixbuf.Pixbuf.new_from_file(iconPaths[False])


if __name__ == "__main__":
    GObject.threads_init()

    global icon
    if hasAppIndicator:
        icon = AppIndicator.Indicator.new("autorotate", unlockrot, AppIndicator.IndicatorCategory.APPLICATION_STATUS)
        icon.set_status(AppIndicator.IndicatorStatus.ACTIVE)
        menu = Gtk.Menu()
        global toggle
        toggle = Gtk.MenuItem("Lock Rotation")

        menu.append(toggle)
        icon.set_menu(menu)
        toggle.show()

        toggle.connect("activate", toggleRotLock)
    else:
        icon = Gtk.StatusIcon.new_from_pixbuf(unlockrot)
        icon.connect("activate", toggleRotLock)

    # Ctrl-c now kills the scipt
    # https://bugzilla.gnome.org/show_bug.cgi?id=622084#c12
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    GObject.idle_add(checkRotation)
    Gtk.main()
